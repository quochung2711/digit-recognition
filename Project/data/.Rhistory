FP(cm, 3)
FN(cm, 3)
P <- function(m, i) {
TP(m,i)/(TP(m, i)+ FP(m,i))
}
R <- function(m, i) {
TP(m, i)/(TP(m,i)+TN(m,i))
}
F <- function(m, i) {
(2*P(m,i)*R(m,i))/(R(m,i)+P(m,i))
}
P(cm, 1)
R(cm, 1)
F(cm, 1)
P(cm, 2)
R(cm, 2)
F(cm, 2)
P(cm, 3)
R(cm, 3)
F(cm, 3)
P_micro <- function(m) {
sum1 = 0
sum2 = 0
for (i in 1:ncol(m)) {
sum1 = sum1 +TP(m,i)
sum2 = sum2+ TP(m,i)+FP(m,i)
}
sum1/sum2
}
R_micro <- function(m) {
sum1 = 0
sum2 = 0
for (i in 1:ncol(m)) {
sum1 = sum1 + TP(m,i)
sum2 = sum2 + TP(m,i)+FN(m,i)
}
sum1/sum2
}
F_micro <- function(m) {
(2*P_micro(m)*R_micro(m))/(R_micro(m)+P_micro(m))
}
P_micro(cm)
R_micro(cm)
F_micro(cm)
P_macro <- function(m) {
sum = 0
for (i in 1:ncol(m)) {
sum= +(TP(m,i) /(TP(m,i)+FP(m,i)))
}
sum
}
R_macro <- function(m) {
sum = 0
for (i in 1:ncol(m)) {
sum= +(TP(m,i) /(TP(m,i)+FN(m,i)))
}
sum
}
F_macro <- function(m) {
(2*P_macro(m)*R_macro(m))/(R_macro(m)+P_macro(m))
}
P_macro(cm)
R_macro(cm)
F_macro(cm)
data("iris")
head(iris)
table(iris$Species)
set.seed(1111)
m <- dim(iris)[1]
ids <- sample(1:m, size = round(m/3), replace = FALSE,
prob = rep(1/m, m))
trainSet <- iris[-ids, ]
testSet <- iris[ids, ]
library(kknn)
knnmodel = kknn(Species ~ ., trainSet, testSet, k = 5,
distance = 2, kernel = "rectangular")
summary(knnmodel)
knnmodel.fit <- fitted(knnmodel)
table(testSet$Species, knnmodel.fit)
pcol <- as.character(as.numeric(testSet$Species))
pairs(testSet[1:4], pch = pcol,
col = c("green3", "red")[(testSet$Species != knnmodel.fit) + 1])
confusion_matrix <- function(predicted, actual) {
return(table(predicted, actual))
}
accuracy <- function(cm) {
return(sum(diag(cm))/sum(cm))
}
actual <- testSet$Species
cm <- confusion_matrix(knnmodel.fit, actual)
cm
accuracy(cm)
set.seed(1111)
nfolds <- 5 # số fold
ids <- 1:nrow(iris)
index <- sample(ids) # xao tron ngau nhien ids
fold <- rep(1:nfolds, each = nrow(iris)/nfolds)
folds <- split(index, fold) # tao mot danh sach voi cac index cho moi fold
ks <- seq(1, 19, 2) # k = 1, 3, 5, ..., 19
accs <- matrix(0, nrow = length(ks), ncol = nfolds + 1)
for (k in 1:length(ks)) {
s = 0
for (i in 1:nfolds) {
t <- kknn(Species ~ .,
train = iris[-folds[[i]], ],
test = iris[folds[[i]], ],
k = k,
distance = 2,
kernel = "rectangular")
cm <- confusion_matrix(fitted(t), iris[folds[[i]], 5])
a <- accuracy(cm)
s = s + a
accs[k, i] = a
}
accs[k, nfolds + 1] = s / nfolds
}
rownames(accs) <- paste ("k = ", ks, sep = "")
colnames(accs) <- c(paste("fold ", 1:nfolds, sep = ""), "average")
accs
library(caret)
train <-trainControl()
library(ggplot2)
data <- data.frame(k = ks, r = as.numeric(accs[, nfolds + 1]))
ggplot(data = data, mapping = aes(x = k, y = r)) +
theme_light() +
ggtitle("Average accuracy by k-fold cross validation") +
xlab("k") +
ylab("Accuracy") +
geom_point(colour = "red", size = 4, shape = 21, fill = "white") +
geom_line(colour = "red", linetype = "dashed", fill = "white")
train_control <- trainControl(method = "cv", number = 5)
hhh <- train(Species ~ .,data = trainSet, trControl = train_control, method = "glm",  family = "binomial" )
train_control <- trainControl(method = "cv", number = 5,
savePredictions = "all",
classProbs = TRUE)
set.seed(1234)
model1 <- train(outcome ~ forestcov + numspecies,
data=train_df,
method = "glm",
family = binomial, trControl = train_control)
set.seed(1234)
model1 <- train(Species ~ .,
data=trainSet,
method = "glm",
family = binomial, trControl = train_control)
cfm <- function(data, lev = NULL, model = NULL) {
cm <- confusionMatrix(table(data$pred, data$obs))
print(cm)
cm$byClass
}
train_control <- trainControl(method = "cv", number = 5,
savePredictions = "all",
classProbs = TRUE)
set.seed(1234)
model1 <- train(Species ~ .,
data=trainSet,
method = "glm",
family = binomial, trControl = train_control)
train_control <-  trainControl(method = "cv", number = 5,
savePredictions = "all",
returnResamp = 'all',
classProbs = TRUE,
summaryFunction = cfm)
set.seed(1234)
model1 <- train(Species ~ .,
data=trainSet,
method = "glm",
family = binomial, trControl = train_control)
set.seed(1234)
model1 <- train(Species ~ .,
data=trainSet,
method = "glm",
family = binomial, trControl = train_control)
set.seed(1234)
model1 <- train(Species ~ .,
data=trainSet,
method = "glm",
family = binomial, trControl = train_control)
set.seed(1234)
mk<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
set.seed(1234)
mk<-train(Species~.,data=trainSet,method="knn",trControl = train_control,metric="Accuracy")
confusionMatrix(mk)["table"]
set.seed(1234)
mk<-train(Species~.,data=trainSet,method="knn",trControl = train_control,metric="Accuracy")
confusionMatrix(mk)["table"]
confusionMatrix(mk)["table"]
confusionMatrix(mk)
ctrl<-trainControl(method="cv",number=5)
set.seed(233)
mk<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
confusionMatrix(mk)
a<-confusionMatrix(mk)
a
F_micro(a)
a<-confusionMatrix(mk)
table(a)
a<-confusionMatrix(mk)
a
a<-confusionMatrix(mk)
mk
a<-confusionMatrix(mk)
a
ctrl<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
confusionMatrix(mk1)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
mk1
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
confusionMatrix(mk1)
a1<-c(35,0,0)
a2<- c(0,32,2)
a3<- c(0, 2, 29)
table(a1,a2)
a<-as.table(a)
a = c(2, 3, 2, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(2, 1, 2, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(2, 3, 2, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(2, 4, 2, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(2, 3, 2, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(2, 3, 1, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(2, 3, 4, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(2, 3, 2, 3, 1, 1, 2, 1, 1, 2, 2, 3, 1, 3, 2)
p = c(2, 3, 2, 2, 2, 3, 1, 3, 2, 3, 3, 3, 3, 1, 1)
table(a,p)
a = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
matrix(a, nrow = 3, ncol = 3,byrow=TRUE)
a = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
a1<-matrix(a, nrow = 3, ncol = 3,byrow=TRUE)
a2<-as.table(a1)
a = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
a1<-matrix(a, nrow = 3, ncol = 3,byrow=TRUE)
a2<-as.table(a1)
a2
F_micro(a2)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
confusionMatrix(mk1)
F_micro(a2)
F_macro(a2)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
mk1
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
predict(mk1, testSet)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
predict(mk1, testSet$Species)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
predict(mk1, testSet$Species)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
predict(mk1, testSet)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
mk1
ctrl<-trainControl(method="cv",number=5)
set.seed(233)
mk<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
mk
a<-confusionMatrix(mk)
a
a = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
a1<-matrix(a, nrow = 3, ncol = 3,byrow=TRUE)
a2<-as.table(a1)
F_micro(a2)
F_macro(a2)
a = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
a1<-matrix(a, nrow = 3, ncol = 3,byrow=TRUE)
a2<-as.table(a1)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
mk1
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
confusionMatrix(mk1)
b = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
b1<-matrix(b, nrow = 3, ncol = 3,byrow=TRUE)
b2<-as.table(b1)
b = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
b1<-matrix(b, nrow = 3, ncol = 3,byrow=TRUE)
b2<-as.table(b1)
F_micro(b2)
F_macro(b2)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=testSet,method="knn",trControl = ctrl,metric="Accuracy")
confusionMatrix(mk1)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
confusionMatrix(mk1)
b = c(35, 0, 0, 0, 32, 2, 0, 2, 29)
b1<-matrix(b, nrow = 3, ncol = 3,byrow=TRUE)
b2<-as.table(b1)
F_micro(b2)
F_macro(b2)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
set.seed(1111)
nfolds <- 3 # số fold
ids <- 1:nrow(iris)
index <- sample(ids) # xao tron ngau nhien ids
fold <- rep(1:nfolds, each = nrow(iris)/nfolds)
folds <- split(index, fold) # tao mot danh sach voi cac index cho moi fold
ks <- seq(1, 19, 2) # k = 1, 3, 5, ..., 19
accs <- matrix(0, nrow = length(ks), ncol = nfolds + 1)
for (k in 1:length(ks)) {
s = 0
for (i in 1:nfolds) {
t <- kknn(Species ~ .,
train = iris[-folds[[i]], ],
test = iris[folds[[i]], ],
k = k,
distance = 2,
kernel = "rectangular")
cm <- confusion_matrix(fitted(t), iris[folds[[i]], 5])
a <- accuracy(cm)
s = s + a
accs[k, i] = a
}
accs[k, nfolds + 1] = s / nfolds
}
rownames(accs) <- paste ("k = ", ks, sep = "")
colnames(accs) <- c(paste("fold ", 1:nfolds, sep = ""), "average")
accs
bag <- bagging(
formula = Species~.,
data = iris,
nbagg = 150,
coob = TRUE,
control = rpart.control(minsplit = 5, cp = 0.632)
)
library(dplyr)       #for data wrangling
library(e1071)       #for calculating variable importance
library(caret)       #for general model fitting
library(rpart)       #for fitting decision trees
library(ipred)
bag <- bagging(
formula = Species~.,
data = iris,
nbagg = 150,
coob = TRUE,
control = rpart.control(minsplit = 5, cp = 0.632)
)
bag <- bagging(
formula = Species~.,
data = iris,
nbagg = 150,
coob = TRUE,
control = rpart.control(minsplit = 5, cp = 0.632)
)
bag
bag <- bagging(
formula = Species~.,
data = iris,
nbagg = 150,
coob = TRUE,
control = rpart.control(minsplit = 2, cp = 0.632)
)
bag
bagging <- train(Species~.,data = trainSet, methods = "treebag", trControl = cvcontrol, importance=TRUE)
cvcontrol <- trainControl(method="repeatedcv", number = 5,
allowParallel=TRUE)
bagging <- train(Species~.,data = trainSet, methods = "treebag", trControl = cvcontrol, importance=TRUE)
cvcontrol <- trainControl(method="repeatedcv", number = 5,
allowParallel=TRUE)
bagging <- train(Species~.,data = trainSet, methods = "treebag", trControl = cvcontrol, importance=TRUE)
bagging
cvcontrol <- trainControl(method="repeatedcv", number = 5,
allowParallel=TRUE)
bagging <- train(Species~.,data = trainSet, methods = "gbm", trControl = cvcontrol, importance=TRUE)
bagging
predic <- predict(bagging, testSet$Species)
testSet
cvcontrol <- trainControl(method="repeatedcv", number = 5,
allowParallel=TRUE)
bagging <- train(Species~.Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data = trainSet, methods = "gbm", trControl = cvcontrol, importance=TRUE)
testSet
trainSet
cvcontrol <- trainControl(method="repeatedcv", number = 5,
allowParallel=TRUE)
bagging <- train(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data = trainSet, methods = "gbm", trControl = cvcontrol, importance=TRUE)
bagging
predic <- predict(bagging, testSet$Species)
predic <- predict(bagging, testSet$Species)
predic <- predict(bagging, testSet$Species)
predic <- predict(bagging, testSet$Species)
cvcontrol <- trainControl(method="repeatedcv", number = 5,
allowParallel=TRUE)
bagging <- train(Species~Sepal.Length+Sepal.Width+Petal.Length+Petal.Width,data = trainSet, methods = "gbm", trControl = cvcontrol, importance=TRUE)
bagging
predic <- predict(bagging, testSet$Species)
predic <- predict(bagging, testSet)
predic <- predict(bagging, testSet)
confusionMatrix(predic, testSet$Species)
c<-c(15, 0,0,0,14,1,0,2,18)
c1<-matrix(data=c,nrow = 3, ncol = 3,byrow = FALSE)
c2<-as.table(c1)
c<-c(15, 0,0,0,14,1,0,2,18)
c1<-matrix(data=c,nrow = 3, ncol = 3,byrow = FALSE)
c2<-as.table(c1)
F_macro(c1)
F_micro(c1)
ctrl1<-trainControl(method="LOOCV",number=5)
set.seed(233)
mk1<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
preb <- predict(mk1, testSet)
confusionMatrix(preb, testSet$Species)
b = c(15, 0, 0, 0, 15, 0, 0, 1, 19)
b1<-matrix(b, nrow = 3, ncol = 3,byrow=TRUE)
b2<-as.table(b1)
F_micro(b2)
F_macro(b2)
ctrl<-trainControl(method="cv",number=5)
set.seed(233)
mk<-train(Species~.,data=trainSet,method="knn",trControl = ctrl,metric="Accuracy")
prea<-predict(mk , testSet)
confusionMatrix(prea, testSet$Species)
a = c(15, 0, 0, 0,15, 0, 0, 1, 19)
a1<-matrix(a, nrow = 3, ncol = 3,byrow=TRUE)
a2<-as.table(a1)
F_micro(a2)
F_macro(a2)
knitr::opts_chunk$set(echo = TRUE)
str(train)
train <-read.csv("C:\\MainProgramLearning\\Data Mining\\Project\\data\\train.csv")
head(train ,10 ,10)
str(train)
trControl <- trainControl(method  = "cv",
number  = 10)
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
install.packages("caret")
knitr::opts_chunk$set(echo = TRUE)
trControl <- trainControl(method  = "cv",
number  = 10)
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
trControl <- trainControl(method  = "cv",
number  = 10)
fit <- train(label ~ .,
method     = "knn",
tuneGrid   = expand.grid(k = 1:10),
trControl  = trControl,
metric     = "Accuracy",
data       = train)
library(readxl)
train <- read_excel("C:/MainProgramLearning/Data Mining/Project/data/train.csv")
View(train)
library(readxl)
test <- read_excel("C:/MainProgramLearning/Data Mining/Project/data/test.csv")
View(test)
library(readxl)
testdata <- read_excel("C:/MainProgramLearning/Data Mining/Project/data/testdata.xlsx")
View(testdata)
traindata <- read.csv("C:/MainProgramLearning/Data Mining/Project/data/traindata.csv", header=FALSE)
View(traindata)
traindata1 <- read.table("C:/MainProgramLearning/Data Mining/Project/data/traindata.xlsx", header=TRUE, row.names=1, quote="\"")
View(traindata1)
traindata
library(readr)
digittest <- read_csv("C:/MainProgramLearning/Data Mining/Project/data/digittest.csv")
View(digittest)
library(readr)
digittrain <- read_csv("C:/MainProgramLearning/Data Mining/Project/data/digittrain.csv")
View(digittrain)
knitr::opts_chunk$set(echo = TRUE)
head(digittrain)
head(digittest)
trainctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
library(caret)
trainctrl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)
model <- train(label~., data = digittrain, trControl=trainctrl, method="knn")
